legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
plot
plot=ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=factor(off)),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
# coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "none",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
plot
plot<-ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=factor(off)),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
# coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "none",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
plot
rm(plot)
plot<-ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=factor(off)),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
# coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "none",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
plot
dev.off()
plot
plot=ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=off),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
#coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "left",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
plot
rm(plot)
p=ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=off),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
#coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "left",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
p
dev.off()
library(tidyverse)
plot=ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=off),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
#coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "none",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
dev.off()
plot
dev.off()
#plot
pdf("plot_output/offset.pdf")
plot
dev.off()
plot=ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=off),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
#coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "left",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm"))+
guides(fill=F)
pdf("plot_output/offset.pdf")
plot
dev.off()
plot=ggplot()+
#geom_sf(fill="#DADADA",data=country_shp)+
geom_raster(aes(x=x,y=y,fill=off),data=gen.offset,stat="identity")+
#geom_sf(fill="transparent",data=country_shp,size=0.5)+
#coord_sf(xlim=c(115, 135),ylim=c(39.4, 54.7))+
#scale_fill_manual(values=offest_color[unique(resdf$level)])+
#scale_x_continuous(limits = c(115, 135))+
#scale_y_continuous(limits = c(39.4, 54.7))+
labs(x="Longitude",y="Latitude") +
theme_bw()+
theme(text=element_text(family="serif"),
axis.ticks.length = unit(0.25,"lines"),axis.ticks=element_line(colour="black",unit(0.6,"line")),
axis.text.x=element_text(size=12,colour = "black"),
axis.text.y=element_text(size=12,colour = "black"),
plot.title = element_text(
size = 15L,
hjust = 0
),
#axis.title.y=element_blank(),
#axis.title.x=element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.key.size=unit(0.1,'inch'),
legend.title = element_text(size=10.5, color="black",vjust=0.5, hjust=0.5),
legend.position = "left",
legend.background=element_rect(colour= "grey" ,fill= "white" ,size=0.6),
legend.text= element_text(size=7.3, color="black",vjust=0.5, hjust=0.5),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
panel.grid.minor = element_line(colour = "white",size=0.1,linetype = 4),
#plot.margin=unit(c(0.1,0.1,0.1,0.1),"mm")
)+
guides(fill=F)
pdf("plot_output/offset.pdf")
plot
dev.off()
save(file = "Code/pilot_gf_workspace.RData")
save(file="Code/pilot_gf_workspace.RData")
save.image("~/Desktop/PhD/Chapter_3/Gradient_Forest/Code/pilot_gf_workspace.RData")
head(snp)
head(snp)
head(clm);dim(clm)
head(snp)
gf #summary
names(gf)
View(gf)
?gf
?gradientForest
# 1. predictor overall importance plot (shows mean accuracy importance and mean importance weighted by SNP R2). In this example, both are conditional importance.
plot(gf, plot.type = "O")
most_important <- names(importance(gf))[1:25]
par(mgp = c(2, 0.75, 0))
# 1a. which vars are most important?
# We can also plot the "turnover functions" showing how allelic composition changes along the spatial or environmental gradients. The shapes are nonlinear and large jumps show steep genetic changes along certain portions of the environmental gradient. The height that the function acheives on the right side of the plot is the total importance and should match the barplot. First, organize the variables by importance and then plot:
by.importance <- names(importance(gf))
plot(gf, plot.type = "C", imp.vars = by.importance, show.species = F, common.scale = T, cex.axis = 1, cex.lab = 1.2, line.ylab = 1, par.args = list(mgp = c(1.5, 0.5, 0), mar = c(2.5, 2, 2, 2), omi = c(0.2, 0.3, 0.2, 0.4)))
# For individual loci:
# species cumulative plot (shows cumulative importance distributions of splits improvement scaled by R2 weighted importance, and standardized by density of observations). Shows cumulative change in abundance of individuals species, where changes occur on the gradient, and the species changing most on each gradient.
plot(gf, plot.type = "C", imp.vars = most_important,
show.overall = F, legend = T, leg.posn = "topleft",
leg.nspecies = 5, cex.lab = 0.7, cex.legend = 0.4,
cex.axis = 0.6, line.ylab = 0.9,
par.args = list(mgp = c(1.5,0.5, 0), mar = c(2.5, 1, 0.1, 0.5),
omi = c(0, 0.3, 0, 0)))
# 2. splits density plot (shows binned split importance and location on each gradient (spikes), kernel density of splits (black lines), of observations (red lines) and of splits standardized by observations density (blue lines)). Each distribution integrates to predictor importance. These plots show where important changes in the abundance of multiple species are occurring along the gradient; they indicate composition change rate.
plot(gf, plot.type = "S", imp.vars = most_important,
leg.posn = "topright", cex.legend = 0.4, cex.axis = 0.6,
cex.lab = 0.7, line.ylab = 0.9, par.args = list(mgp = c(1.5,
0.5, 0), mar = c(3.1, 1.5, 0.1, 1)))
plot(gf, plot.type = "C", imp.vars = most_important,
show.species = F, common.scale = T, cex.axis = 0.6,
cex.lab = 0.7, line.ylab = 0.9, par.args = list(mgp = c(1.5,
0.5, 0), mar = c(2.5, 1, 0.1, 0.5), omi = c(0,0.3, 0, 0)))
# 5. shows the R2 measure of the fit of the random forest model for each species, ordered in various ways
plot(gf, plot.type = "P", show.names = F, horizontal = F,
cex.axis = 1, cex.labels = 0.7, line = 2.5)
pred
head(pred.fut)
setwd("/Users/katherine/Desktop/PhD/github/song-sparrow-WGS/analyses")
library(dplyr)
library(sf)
library(tidyr)
library(stringr)
library(rgbif) # Interface to the Global 'Biodiversity' Information Facility API
setwd("/Users/katherine/Desktop/PhD/github/song-sparrow-WGS")
###### ---------------- Create input file -------------- #######
# read in initial df
# ClimateNAr requires a properly formatted .csv input file that includes the following headers: ID1, ID2, lat, long, el
env<-read.csv("data/climateNA_input.csv", stringsAsFactors = F)
env<- env %>%
rename(c(ID1=sample_id,
ID2=subspecies))
head(env)
# ID1     ID2      Lat      Long
# 1 AK_caurina_S11 caurina 60.41750 -145.4039
# 2 AK_caurina_S12 caurina 60.41750 -145.4039
# 3 AK_caurina_S13 caurina 60.35100 -145.4200
# 4 AK_caurina_S14 caurina 60.35100 -145.4200
# 5 AK_caurina_S15 caurina 62.60757 -144.5637
# 6 AK_caurina_S16 caurina 60.41750 -145.4039
str(env)
env$lat <- as.numeric(env$lat)
env$lat <- as.numeric(env$Lat)
env$long <- as.numeric(env$Long)
# extract elevation using rgbif
# To get a GeoNames user name, register for an account at http://www.geonames.org/login- then you can enable your account for the GeoNames webservice on your account page (http://www.geonames.org/manageaccount). Once you are enabled to use the webservice, you can pass in your username to the username parameter. Better yet, store your username in your .Renviron file, or similar (e.g., .zshrc or .bash_profile files) and read it in via Sys.getenv() as in the examples below. By default we do Sys.getenv("GEONAMES_USER") for the username parameter.
user<-Sys.getenv("kcarbeck")
el <- elevation(latitude = env$lat, longitude = env$long, elevation_model = "srtm1",
username="kcarbeck")
###### ---------------- Create input file -------------- #######
# read in initial df
# ClimateNAr requires a properly formatted .csv input file that includes the following headers: ID1, ID2, lat, long, el
env<-read.csv("data/climateNA_input.csv", stringsAsFactors = F)
env<- env %>%
rename(c(ID1=sample_id,
ID2=subspecies))
head(env)
# ID1     ID2      Lat      Long
# 1 AK_caurina_S11 caurina 60.41750 -145.4039
# 2 AK_caurina_S12 caurina 60.41750 -145.4039
# 3 AK_caurina_S13 caurina 60.35100 -145.4200
# 4 AK_caurina_S14 caurina 60.35100 -145.4200
# 5 AK_caurina_S15 caurina 62.60757 -144.5637
# 6 AK_caurina_S16 caurina 60.41750 -145.4039
str(env)
env$lat <- as.numeric(env$Lat)
env$long <- as.numeric(env$Long)
# extract elevation using rgbif
# To get a GeoNames user name, register for an account at http://www.geonames.org/login- then you can enable your account for the GeoNames webservice on your account page (http://www.geonames.org/manageaccount). Once you are enabled to use the webservice, you can pass in your username to the username parameter. Better yet, store your username in your .Renviron file, or similar (e.g., .zshrc or .bash_profile files) and read it in via Sys.getenv() as in the examples below. By default we do Sys.getenv("GEONAMES_USER") for the username parameter.
user<-Sys.getenv("kcarbeck")
el <- elevation(latitude = env$lat, longitude = env$long, elevation_model = "srtm1",
username="kcarbeck")
env<- env %>%
bind_cols(el=el$elevation_geonames)
write.csv(env, file="data/climateNA_input_el.csv", row.names = FALSE)
### Extract ClimateNA monthly summaries directly with R
devtools::install_local("/Users/katherine/Downloads/ClimateNAr.zip", repos=NULL, type="source") # install climateNAr
library(ClimateNAr)
?ClimateNA_API2
clm <- ClimateNA_API2(ClimateBC_NA='NA', inputFile=env, period='Normal_1961_1990.nrm',MSY='SY')
head(clm);dim(clm)
View(clm)
write.csv(clm, file="data/climateNA_output.csv", row.names = FALSE)
library(dplyr)
library(sf)
library(tidyr)
library(stringr)
#gradientForest was a massive pain to install. Errors:
#ERROR: compilation failed for package ‘extendedForest’
#Warning in install.packages : installation of package ‘extendedForest’ had non-zero exit status
#ERROR: dependency ‘extendedForest’ is not available for package ‘gradientForest’
#Warning in install.packages : installation of package ‘gradientForest’ had non-zero exit status
#R was not able to compile packages...you have to install homebrew and gcc (https://formulae.brew.sh/formula/gcc#default)
#install.packages("gradientForest", repos="http://R-Forge.R-project.org")
#install.packages("extendedForest", repos="http://R-Forge.R-project.org")
library(gradientForest)
#### DATA ####
#load environmental data of 24 predictors (measured at each site or interpolated)
clm<-read.csv(file="data/climateNA_output.csv")
View(clm)
env
dim(env)
clm <- ClimateNA_API2(ClimateBC_NA='NA', inputFile=env, period='Normal_1961_1990.nrm',MSY='SY')
head(clm);dim(clm)
View(clm)
###### ---------------- Create input file -------------- #######
# read in initial df
# ClimateNAr requires a properly formatted .csv input file that includes the following headers: ID1, ID2, lat, long, el
env<-read.csv("data/climateNA_input.csv", stringsAsFactors = F)
env<- env %>%
rename(c(ID1=sample_id,
ID2=subspecies))
head(env)
# ID1     ID2      Lat      Long
# 1 AK_caurina_S11 caurina 60.41750 -145.4039
# 2 AK_caurina_S12 caurina 60.41750 -145.4039
# 3 AK_caurina_S13 caurina 60.35100 -145.4200
# 4 AK_caurina_S14 caurina 60.35100 -145.4200
# 5 AK_caurina_S15 caurina 62.60757 -144.5637
# 6 AK_caurina_S16 caurina 60.41750 -145.4039
str(env)
env$lat <- as.numeric(env$Lat)
env$lat <- as.numeric(env$lat)
env$long <- as.numeric(env$long)
View(env)
# extract elevation using rgbif
# To get a GeoNames user name, register for an account at http://www.geonames.org/login- then you can enable your account for the GeoNames webservice on your account page (http://www.geonames.org/manageaccount). Once you are enabled to use the webservice, you can pass in your username to the username parameter. Better yet, store your username in your .Renviron file, or similar (e.g., .zshrc or .bash_profile files) and read it in via Sys.getenv() as in the examples below. By default we do Sys.getenv("GEONAMES_USER") for the username parameter.
user<-Sys.getenv("kcarbeck")
el <- elevation(latitude = env$lat, longitude = env$long, elevation_model = "srtm1",
username="kcarbeck")
env<- env %>%
bind_cols(el=el$elevation_geonames)
dim(env)
View(env)
write.csv(env, file="data/climateNA_input_el.csv", row.names = FALSE)
###### ---------------- Create input file -------------- #######
# read in initial df
# ClimateNAr requires a properly formatted .csv input file that includes the following headers: ID1, ID2, lat, long, el
env<-read.csv("data/climateNA_input.csv", stringsAsFactors = F)
env<- env %>%
rename(c(ID1=sample_id,
ID2=subspecies))
head(env)
# ID1     ID2      Lat      Long
# 1 AK_caurina_S11 caurina 60.41750 -145.4039
# 2 AK_caurina_S12 caurina 60.41750 -145.4039
# 3 AK_caurina_S13 caurina 60.35100 -145.4200
# 4 AK_caurina_S14 caurina 60.35100 -145.4200
# 5 AK_caurina_S15 caurina 62.60757 -144.5637
# 6 AK_caurina_S16 caurina 60.41750 -145.4039
str(env)
env$lat <- as.numeric(env$lat)
env$long <- as.numeric(env$long)
el <- elevation(latitude = env$lat, longitude = env$long, elevation_model = "srtm1",
username="kcarbeck")
env<- env %>%
bind_cols(el=el$elevation_geonames)
dim(env)
View(env)
write.csv(env, file="data/climateNA_input_el.csv", row.names = FALSE)
head(clm);dim(clm)
#### DATA ####
#load environmental data of 24 predictors (measured at each site or interpolated)
clm<-read.csv(file="data/climateNA_output.csv")
head(clm);dim(clm)
clm<-clm %>%
rename(c(sample_id=ID1,
subspecies=ID2)) %>%
select(!c(subspecies, lat, long, el, MAR))
clm<-clm %>%
rename(c(sample_id=ID1,
subspecies=ID2)) %>%
dplyr::select(!c(subspecies, lat, long, el, MAR))
clm<-clm %>%
rename(c(sample_id=ID1,
subspecies=ID2)) %>%
dplyr::select(!c(subspecies, lat, long, el, MAR))
head(clm);dim(clm)
View(clm)
clm<-clm %>%
rename(c(sample_id=ID1,
subspecies=ID2)) %>%
dplyr::select(!c(subspecies, lat, long, el))
View(clm)
clm<-clm %>%
rename(c(sample_id=ID1,
subspecies=ID2)) %>%
dplyr::select(!c(subspecies, Latitude, Longitude, Elevation))
head(clm);dim(clm)
clm2 <- clm[,-1]
rownames(clm2) <- clm[,1]
clm <-clm2
View(clm)
# load subsset data of 79 individuals from 457 SNPs
# each species is treated as dependent var in usual use of GF, but in my dataset each SNPs or MAF will be used
library(vcfR)
my_vcf <- read.vcfR("data/imputed_SOSP_352Samples_012923.vcf.gz")
memory.limit()
my_vcf <- read.vcfR("data/imputed_SOSP_352Samples_012923.vcf.gz")
